[
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0001_initial",
        "description": "store.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, verbose_name='Category Name')),",
        "detail": "store.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0002_add_slug_to_category",
        "description": "store.migrations.0002_add_slug_to_category",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='category',\n            name='slug',\n            field=models.SlugField(max_length=120, unique=True, blank=True),\n        ),",
        "detail": "store.migrations.0002_add_slug_to_category",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0003_section_alter_category_slug",
        "description": "store.migrations.0003_section_alter_category_slug",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0002_add_slug_to_category'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Section',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, verbose_name='Section Name')),",
        "detail": "store.migrations.0003_section_alter_category_slug",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0004_product_section",
        "description": "store.migrations.0004_product_section",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0003_section_alter_category_slug'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='product',\n            name='section',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.section', verbose_name='Section'),\n        ),",
        "detail": "store.migrations.0004_product_section",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0005_product_average_rating_product_rating",
        "description": "store.migrations.0005_product_average_rating_product_rating",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0004_product_section'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='product',\n            name='average_rating',\n            field=models.DecimalField(decimal_places=2, default=0.0, max_digits=3, verbose_name='Average Rating'),\n        ),",
        "detail": "store.migrations.0005_product_average_rating_product_rating",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0006_productimage_image_alter_productimage_image_url",
        "description": "store.migrations.0006_productimage_image_alter_productimage_image_url",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0005_product_average_rating_product_rating'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='productimage',\n            name='image',\n            field=models.ImageField(blank=True, null=True, upload_to='product_images/', verbose_name='Image File'),\n        ),",
        "detail": "store.migrations.0006_productimage_image_alter_productimage_image_url",
        "documentation": {}
    },
    {
        "label": "ProductImageInline",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class ProductImageInline(admin.TabularInline):\n    model = ProductImage\n    extra = 1\n    verbose_name = \"Product Image\"\n    verbose_name_plural = \"Product Images\"\n    fields = ('image', 'image_url', 'alt_text', 'is_primary')\n    def get_formset(self, request, obj=None, **kwargs):\n        formset = super().get_formset(request, obj, **kwargs)\n        formset.form.base_fields['image_url'].required = False\n        formset.form.base_fields['image'].required = False",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    list_display = ['name']\n    search_fields = ['name']\n    ordering = ['name']\n@admin.register(Product)\nclass ProductAdmin(admin.ModelAdmin):\n    list_display = ['name', 'price', 'discount_price', 'gender', 'category', 'section', 'quantity', 'status', 'is_featured', 'created_at']\n    list_filter = ['category', 'gender', 'status', 'is_featured', 'created_at', 'section']\n    search_fields = ['name', 'description']\n    list_editable = ['price', 'discount_price', 'quantity', 'status', 'is_featured']",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "ProductAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class ProductAdmin(admin.ModelAdmin):\n    list_display = ['name', 'price', 'discount_price', 'gender', 'category', 'section', 'quantity', 'status', 'is_featured', 'created_at']\n    list_filter = ['category', 'gender', 'status', 'is_featured', 'created_at', 'section']\n    search_fields = ['name', 'description']\n    list_editable = ['price', 'discount_price', 'quantity', 'status', 'is_featured']\n    readonly_fields = ['created_at', 'updated_at']\n    def get_queryset(self, request):\n        qs = super().get_queryset(request)\n        gender = request.GET.get('gender', None)\n        if gender:",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "OrderItemInline",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class OrderItemInline(admin.TabularInline):\n    model = OrderItem\n    extra = 0\n    readonly_fields = ['product', 'quantity', 'price', 'subtotal']\n    can_delete = False\n    def subtotal(self, obj):\n        if obj.price is None:\n            return 0\n        return obj.price * obj.quantity\n    subtotal.short_description = 'Subtotal'",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "SectionAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class SectionAdmin(admin.ModelAdmin):\n    list_display = ['name', 'slug', 'is_active', 'created_at']\n    list_filter = ['is_active', 'created_at']\n    search_fields = ['name', 'slug']\n    list_editable = ['is_active']\n    prepopulated_fields = {'slug': ('name',)}\n    readonly_fields = ['created_at', 'updated_at']\n    fieldsets = [\n        ('Basic Information', {'fields': ['name', 'slug']}),\n        ('Status', {'fields': ['is_active']}),",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "OrderAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class OrderAdmin(admin.ModelAdmin):\n    list_display = ['id', 'customer_name', 'customer_email', 'total_amount', 'status', 'payment_method', 'is_paid', 'created_at']\n    list_filter = ['status', 'payment_method', 'is_paid', 'created_at']\n    search_fields = ['customer_name', 'customer_email', 'customer_phone']\n    readonly_fields = ['created_at', 'updated_at']\n    list_editable = ['status', 'is_paid']\n    fieldsets = [\n        ('Customer Information', {'fields': ['customer_name', 'customer_email', 'customer_phone']}),\n        ('Shipping Information', {'fields': ['shipping_address', 'order_notes']}),\n        ('Order Details', {'fields': ['total_amount', 'status', 'payment_method', 'is_paid']}),",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "StoreConfig",
        "kind": 6,
        "importPath": "store.apps",
        "description": "store.apps",
        "peekOfCode": "class StoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'store'",
        "detail": "store.apps",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField(max_length=100, verbose_name=\"Category Name\")\n    slug = models.SlugField(max_length=100, unique=True, blank=True)\n    description = models.TextField(blank=True, null=True, verbose_name=\"Description\")\n    is_active = models.BooleanField(default=True, verbose_name=\"Active\")\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        verbose_name = \"Category\"\n        verbose_name_plural = \"Categories\"",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Section",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Section(models.Model):\n    name = models.CharField(max_length=100, verbose_name=\"Section Name\")\n    slug = models.SlugField(max_length=100, unique=True, blank=True)\n    is_active = models.BooleanField(default=True, verbose_name=\"Active\")\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        verbose_name = \"Section\"\n        verbose_name_plural = \"Sections\"\n        ordering = ['name']",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Product(models.Model):\n    GENDER_CHOICES = (\n        ('M', 'Male'),\n        ('F', 'Female'),\n        ('U', 'Unisex'),\n    )\n    GENDER_FILTER_CHOICES = (\n        ('M', 'Men\\'s Collection'),\n        ('F', 'Women\\'s Collection'),\n        ('U', 'Unisex Collection'),",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "ProductImage",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class ProductImage(models.Model):\n    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='images')\n    image = models.ImageField(upload_to='product_images/', null=True, blank=True, verbose_name=\"Image File\")\n    image_url = models.URLField(null=True, blank=True, verbose_name=\"Image URL\")\n    alt_text = models.CharField(max_length=100, blank=True, verbose_name=\"Alt Text\")\n    is_primary = models.BooleanField(default=False, verbose_name=\"Primary Image\")\n    created_at = models.DateTimeField(auto_now_add=True)\n    def save(self, *args, **kwargs):\n        if not self.image and not self.image_url:\n            raise ValidationError(\"Either image file or image URL must be provided\")",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Order(models.Model):\n    STATUS_CHOICES = (\n        ('pending', 'Pending'),\n        ('processing', 'Processing'),\n        ('shipped', 'Shipped'),\n        ('delivered', 'Delivered'),\n        ('cancelled', 'Cancelled'),\n    )\n    PAYMENT_CHOICES = (\n        ('cash_on_delivery', 'Cash on Delivery'),",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "OrderItem",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class OrderItem(models.Model):\n    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items')\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(default=1)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    class Meta:\n        verbose_name = \"Order Item\"\n        verbose_name_plural = \"Order Items\"\n    def __str__(self):\n        return f\"{self.quantity} x {self.product.name}\"",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "store.urls",
        "description": "store.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.index, name='index'),\n    path('products/', views.product_list, name='product_list'),\n    path('product/<int:product_id>/', views.product_detail, name='product_detail'),\n    path('product/<int:product_id>/add-to-cart/', views.add_to_cart, name='add_to_cart'),\n    path('contact/', views.contact, name='contact'),\n    path('cart/', views.view_cart, name='view_cart'),\n    path('cart/increase/<int:product_id>/', views.cart_increase, name='cart_increase'),\n    path('cart/decrease/<int:product_id>/', views.cart_decrease, name='cart_decrease'),\n    path('checkout/', views.checkout, name='checkout'),",
        "detail": "store.urls",
        "documentation": {}
    },
    {
        "label": "SuccessView",
        "kind": 6,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "class SuccessView(DetailView):\n    model = Order\n    template_name = 'store/success.html'\n    context_object_name = 'order'\n    def get_object(self):\n        return get_object_or_404(Order, id=self.kwargs['order_id'])\ndef index(request):\n    categories = Category.objects.all()\n    return render(request, 'store/index.html', {'categories': categories})\ndef product_list(request):",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "SuccessView",
        "kind": 6,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "class SuccessView(DetailView):\n    model = Order\n    template_name = 'store/success.html'\n    context_object_name = 'order'\n    def get_object(self):\n        return get_object_or_404(Order, id=self.kwargs['order_id'])",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def index(request):\n    categories = Category.objects.all()\n    return render(request, 'store/index.html', {'categories': categories})\ndef product_list(request):\n    category_slug = request.GET.get('category')\n    min_price = request.GET.get('min_price')\n    max_price = request.GET.get('max_price')\n    min_rating = request.GET.get('min_rating')\n    gender = request.GET.get('gender', 'all')\n    products = Product.objects.all()",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "product_list",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def product_list(request):\n    category_slug = request.GET.get('category')\n    min_price = request.GET.get('min_price')\n    max_price = request.GET.get('max_price')\n    min_rating = request.GET.get('min_rating')\n    gender = request.GET.get('gender', 'all')\n    products = Product.objects.all()\n    if category_slug:\n        products = products.filter(category__name=category_slug)\n    if min_price:",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "product_detail",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def product_detail(request, product_id):\n    product = get_object_or_404(Product, id=product_id)\n    return render(request, 'store/product_detail.html', {'product': product})\ndef add_to_cart(request, product_id):\n    product = get_object_or_404(Product, id=product_id)\n    cart = request.session.get('cart', {})\n    if str(product.id) in cart:\n        cart_quantity = cart[str(product.id)]\n    else:\n        cart_quantity = 0",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "add_to_cart",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def add_to_cart(request, product_id):\n    product = get_object_or_404(Product, id=product_id)\n    cart = request.session.get('cart', {})\n    if str(product.id) in cart:\n        cart_quantity = cart[str(product.id)]\n    else:\n        cart_quantity = 0\n    # التأكد من أن الكمية المطلوبة لا تتجاوز المتوفر\n    if cart_quantity + 1 > product.quantity:\n        messages.error(request, f\"عذرًا، لا يوجد كمية كافية من {product.name}\")",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "cart_increase",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def cart_increase(request, product_id):\n    product = get_object_or_404(Product, id=product_id)\n    cart = request.session.get('cart', {})\n    current_quantity = cart.get(str(product.id), 0)\n    if current_quantity < product.quantity:\n        cart[str(product.id)] = current_quantity + 1\n        messages.success(request, f\"تم زيادة عدد {product.name}\")\n    else:\n        messages.error(request, f\"لا يمكن زيادة العدد، لا يوجد رصيد كافٍ من {product.name}\")\n    request.session['cart'] = cart",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "cart_decrease",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def cart_decrease(request, product_id):\n    product = get_object_or_404(Product, id=product_id)\n    cart = request.session.get('cart', {})\n    current_quantity = cart.get(str(product.id), 0)\n    if current_quantity > 1:\n        cart[str(product.id)] = current_quantity - 1\n        messages.info(request, f\"تم تقليل عدد {product.name}\")\n    else:\n        del cart[str(product.id)]\n        messages.info(request, f\"تم إزالة {product.name} من العربة\")",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "contact",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def contact(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        message = request.POST.get('message')\n        # يمكنك هنا إرسال البريد أو حفظه\n        return render(request, 'store/contact_success.html')\n    return render(request, 'store/contact.html')\ndef subscribe(request):\n    if request.method == 'POST':",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "subscribe",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def subscribe(request):\n    if request.method == 'POST':\n        email = request.POST.get('email')\n        if not email:\n            messages.error(request, 'الرجاء إدخال بريد إلكتروني صحيح.')\n            return redirect('index')\n        subject = 'شكرًا على الاشتراك في نشرتنا البريدية'\n        message = 'شكرًا لك على الاشتراك في نشرتنا البريدية. سنقوم بإعلامك بأحدث المنتجات والعروض.'\n        email_from = settings.EMAIL_HOST_USER\n        recipient_list = [email]",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "view_cart",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def view_cart(request):\n    cart = request.session.get('cart', {})\n    product_ids = cart.keys()\n    if not product_ids:\n        return render(request, 'store/cart.html', {\n            'cart_items': [],\n            'total_price': 0\n        })\n    products = Product.objects.filter(id__in=product_ids)\n    cart_items = []",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "checkout",
        "kind": 2,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "def checkout(request):\n    cart = request.session.get('cart', {})\n    product_ids = cart.keys()\n    if not product_ids:\n        messages.error(request, \"Your cart is empty. Please add items before checkout.\")\n        return redirect('view_cart')\n    products = Product.objects.filter(id__in=product_ids)\n    cart_items = []\n    total_price = 0\n    for product in products:",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "website.asgi",
        "description": "website.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "website.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-s#i57_=o7bnmqd@nmwpcq*i$g+v15my9n4l42ywz8cw=#r8srk'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['XtigerGmerX.pythonanywhere.com', '127.0.0.1', 'localhost']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-s#i57_=o7bnmqd@nmwpcq*i$g+v15my9n4l42ywz8cw=#r8srk'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['XtigerGmerX.pythonanywhere.com', '127.0.0.1', 'localhost']\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',  # Add Jazzmin\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['XtigerGmerX.pythonanywhere.com', '127.0.0.1', 'localhost']\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',  # Add Jazzmin\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['XtigerGmerX.pythonanywhere.com', '127.0.0.1', 'localhost']\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',  # Add Jazzmin\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'jazzmin',  # Add Jazzmin\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'store',\n]",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "JAZZMIN_SETTINGS",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "JAZZMIN_SETTINGS = {\n    \"site_title\": \"Store Admin\",\n    \"site_header\": \"Store Administration\",\n    \"site_brand\": \"Store Admin\",\n    \"welcome_sign\": \"Welcome to the Store Admin Panel\",\n    \"show_ui_builder\": True,\n    \"navigation_expanded\": False,\n    \"theme\": \"dark\",\n}\nMIDDLEWARE = [",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'website.urls'",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "ROOT_URLCONF = 'website.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "WSGI_APPLICATION = 'website.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# default static files settings for PythonAnywhere.",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# default static files settings for PythonAnywhere.\n# see https://help.pythonanywhere.com/pages/DjangoStaticFiles for more info",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# default static files settings for PythonAnywhere.\n# see https://help.pythonanywhere.com/pages/DjangoStaticFiles for more info\nMEDIA_ROOT = '/home/XtigerGmerX/website/media'",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# default static files settings for PythonAnywhere.\n# see https://help.pythonanywhere.com/pages/DjangoStaticFiles for more info\nMEDIA_ROOT = '/home/XtigerGmerX/website/media'\nMEDIA_URL = '/media/'\nSTATIC_ROOT = '/home/XtigerGmerX/website/static'\nSTATIC_URL = '/static/'",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# default static files settings for PythonAnywhere.\n# see https://help.pythonanywhere.com/pages/DjangoStaticFiles for more info\nMEDIA_ROOT = '/home/XtigerGmerX/website/media'\nMEDIA_URL = '/media/'\nSTATIC_ROOT = '/home/XtigerGmerX/website/static'\nSTATIC_URL = '/static/'\n# Email Configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "MEDIA_ROOT = '/home/XtigerGmerX/website/media'\nMEDIA_URL = '/media/'\nSTATIC_ROOT = '/home/XtigerGmerX/website/static'\nSTATIC_URL = '/static/'\n# Email Configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'your_email@gmail.com'  # Replace with your actual Gmail",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nSTATIC_ROOT = '/home/XtigerGmerX/website/static'\nSTATIC_URL = '/static/'\n# Email Configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'your_email@gmail.com'  # Replace with your actual Gmail\nEMAIL_HOST_PASSWORD = 'your_app_password'  # Replace with Gmail app password",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "STATIC_ROOT = '/home/XtigerGmerX/website/static'\nSTATIC_URL = '/static/'\n# Email Configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'your_email@gmail.com'  # Replace with your actual Gmail\nEMAIL_HOST_PASSWORD = 'your_app_password'  # Replace with Gmail app password\nDEFAULT_FROM_EMAIL = 'your_email@gmail.com'  # Must match EMAIL_HOST_USER",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "STATIC_URL = '/static/'\n# Email Configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'your_email@gmail.com'  # Replace with your actual Gmail\nEMAIL_HOST_PASSWORD = 'your_app_password'  # Replace with Gmail app password\nDEFAULT_FROM_EMAIL = 'your_email@gmail.com'  # Must match EMAIL_HOST_USER\nEMAIL_TIMEOUT = 10  # Add timeout to prevent hanging",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'your_email@gmail.com'  # Replace with your actual Gmail\nEMAIL_HOST_PASSWORD = 'your_app_password'  # Replace with Gmail app password\nDEFAULT_FROM_EMAIL = 'your_email@gmail.com'  # Must match EMAIL_HOST_USER\nEMAIL_TIMEOUT = 10  # Add timeout to prevent hanging\n###############",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'your_email@gmail.com'  # Replace with your actual Gmail\nEMAIL_HOST_PASSWORD = 'your_app_password'  # Replace with Gmail app password\nDEFAULT_FROM_EMAIL = 'your_email@gmail.com'  # Must match EMAIL_HOST_USER\nEMAIL_TIMEOUT = 10  # Add timeout to prevent hanging\n###############",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'your_email@gmail.com'  # Replace with your actual Gmail\nEMAIL_HOST_PASSWORD = 'your_app_password'  # Replace with Gmail app password\nDEFAULT_FROM_EMAIL = 'your_email@gmail.com'  # Must match EMAIL_HOST_USER\nEMAIL_TIMEOUT = 10  # Add timeout to prevent hanging\n###############",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'your_email@gmail.com'  # Replace with your actual Gmail\nEMAIL_HOST_PASSWORD = 'your_app_password'  # Replace with Gmail app password\nDEFAULT_FROM_EMAIL = 'your_email@gmail.com'  # Must match EMAIL_HOST_USER\nEMAIL_TIMEOUT = 10  # Add timeout to prevent hanging\n###############",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "EMAIL_HOST_USER = 'your_email@gmail.com'  # Replace with your actual Gmail\nEMAIL_HOST_PASSWORD = 'your_app_password'  # Replace with Gmail app password\nDEFAULT_FROM_EMAIL = 'your_email@gmail.com'  # Must match EMAIL_HOST_USER\nEMAIL_TIMEOUT = 10  # Add timeout to prevent hanging\n###############",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = 'your_app_password'  # Replace with Gmail app password\nDEFAULT_FROM_EMAIL = 'your_email@gmail.com'  # Must match EMAIL_HOST_USER\nEMAIL_TIMEOUT = 10  # Add timeout to prevent hanging\n###############",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "DEFAULT_FROM_EMAIL = 'your_email@gmail.com'  # Must match EMAIL_HOST_USER\nEMAIL_TIMEOUT = 10  # Add timeout to prevent hanging\n###############",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_TIMEOUT",
        "kind": 5,
        "importPath": "website.settings",
        "description": "website.settings",
        "peekOfCode": "EMAIL_TIMEOUT = 10  # Add timeout to prevent hanging\n###############",
        "detail": "website.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "website.urls",
        "description": "website.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('store.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "website.urls",
        "documentation": {}
    },
    {
        "label": "project_home",
        "kind": 5,
        "importPath": "website.wsgi",
        "description": "website.wsgi",
        "peekOfCode": "project_home = '/home/XtigerGmerX/Store_website'\nif project_home not in sys.path:\n    sys.path.insert(0, project_home)\n# set environment variable to tell django where your settings.py is\nos.environ['DJANGO_SETTINGS_MODULE'] = 'Store_website.settings'\n# serve django via WSGI\nfrom django.core.wsgi import get_wsgi_application\napplication = get_wsgi_application()",
        "detail": "website.wsgi",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "website.wsgi",
        "description": "website.wsgi",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'Store_website.settings'\n# serve django via WSGI\nfrom django.core.wsgi import get_wsgi_application\napplication = get_wsgi_application()",
        "detail": "website.wsgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "website.wsgi",
        "description": "website.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "website.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'website.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]